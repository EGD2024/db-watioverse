#!/usr/bin/env python3
"""
Script para probar descarga espec√≠fica de datos OMIE con token actual
Verifica si podemos obtener precios de mercado que us√°bamos antes
"""

import os
import sys
import logging
import requests
from datetime import datetime, timedelta
import json
from dotenv import load_dotenv

# Cargar variables de entorno
env_path = '/Users/vagalumeenergiamovil/PROYECTOS/Entorno/motores/motor_actualizaciones/config/migrated/watioverse.env'
load_dotenv(env_path)

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/Users/vagalumeenergiamovil/PROYECTOS/Entorno/motores/db_watioverse/pipeline/logs/test_omie_download.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def get_esios_token():
    """Obtiene el token ESIOS"""
    return os.getenv('ESIOS_API_TOKEN')

def test_omie_price_download(token, days_back=7):
    """Prueba descarga de precios OMIE con indicador 600"""
    logger.info(f"üîç Probando descarga OMIE √∫ltimos {days_back} d√≠as...")
    
    headers = {
        'Accept': 'application/json; application/vnd.esios-api-v1+json',
        'Content-Type': 'application/json',
        'Host': 'api.esios.ree.es',
        'Authorization': f'Token token={token}'
    }
    
    # Fechas para prueba
    end_date = datetime.now() - timedelta(days=1)  # Ayer
    start_date = end_date - timedelta(days=days_back)
    
    try:
        # Indicador 600: Precio mercado diario (‚Ç¨/MWh)
        url = "https://api.esios.ree.es/indicators/600"
        params = {
            'start_date': start_date.strftime('%Y-%m-%dT00:00'),
            'end_date': end_date.strftime('%Y-%m-%dT23:59')
        }
        
        logger.info(f"   Per√≠odo: {start_date.strftime('%Y-%m-%d')} a {end_date.strftime('%Y-%m-%d')}")
        logger.info(f"   URL: {url}")
        logger.info(f"   Par√°metros: {params}")
        
        response = requests.get(url, headers=headers, params=params, timeout=30)
        
        logger.info(f"üìä Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            indicator_data = data.get('indicator', {})
            values = indicator_data.get('values', [])
            
            logger.info(f"‚úÖ Descarga exitosa:")
            logger.info(f"   ‚Ä¢ Indicador: {indicator_data.get('name', 'N/A')}")
            logger.info(f"   ‚Ä¢ Valores obtenidos: {len(values)}")
            logger.info(f"   ‚Ä¢ Unidad: {indicator_data.get('magnitude', 'N/A')}")
            
            # Mostrar algunos valores de ejemplo
            if values:
                logger.info("üìà Primeros 5 valores:")
                for i, value in enumerate(values[:5]):
                    logger.info(f"   {i+1}. {value.get('datetime', 'N/A')}: {value.get('value', 'N/A')} ‚Ç¨/MWh")
                
                # Estad√≠sticas b√°sicas
                prices = [float(v.get('value', 0)) for v in values if v.get('value') is not None]
                if prices:
                    logger.info(f"üìä Estad√≠sticas:")
                    logger.info(f"   ‚Ä¢ Precio m√≠nimo: {min(prices):.2f} ‚Ç¨/MWh")
                    logger.info(f"   ‚Ä¢ Precio m√°ximo: {max(prices):.2f} ‚Ç¨/MWh")
                    logger.info(f"   ‚Ä¢ Precio medio: {sum(prices)/len(prices):.2f} ‚Ç¨/MWh")
            
            return {
                'status': 'SUCCESS',
                'values_count': len(values),
                'data': values[:3],  # Solo primeros 3 para ejemplo
                'indicator_name': indicator_data.get('name', 'N/A')
            }
            
        elif response.status_code == 403:
            logger.error("‚ùå Sin permisos para indicador 600")
            return {'status': 'FORBIDDEN', 'error': response.text}
        else:
            logger.error(f"‚ùå Error {response.status_code}: {response.text}")
            return {'status': 'ERROR', 'code': response.status_code, 'error': response.text}
            
    except Exception as e:
        logger.error(f"‚ùå Excepci√≥n: {e}")
        return {'status': 'EXCEPTION', 'error': str(e)}

def test_demand_download(token, days_back=3):
    """Prueba descarga de demanda con indicador 460"""
    logger.info(f"üîç Probando descarga demanda √∫ltimos {days_back} d√≠as...")
    
    headers = {
        'Accept': 'application/json; application/vnd.esios-api-v1+json',
        'Content-Type': 'application/json',
        'Host': 'api.esios.ree.es',
        'Authorization': f'Token token={token}'
    }
    
    # Fechas para prueba
    end_date = datetime.now() - timedelta(days=1)
    start_date = end_date - timedelta(days=days_back)
    
    try:
        # Indicador 460: Demanda b.c. peninsular
        url = "https://api.esios.ree.es/indicators/460"
        params = {
            'start_date': start_date.strftime('%Y-%m-%dT00:00'),
            'end_date': end_date.strftime('%Y-%m-%dT23:59')
        }
        
        response = requests.get(url, headers=headers, params=params, timeout=30)
        
        logger.info(f"üìä Demanda Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            indicator_data = data.get('indicator', {})
            values = indicator_data.get('values', [])
            
            logger.info(f"‚úÖ Demanda descargada:")
            logger.info(f"   ‚Ä¢ Valores: {len(values)}")
            logger.info(f"   ‚Ä¢ Indicador: {indicator_data.get('name', 'N/A')}")
            
            return {
                'status': 'SUCCESS',
                'values_count': len(values),
                'indicator_name': indicator_data.get('name', 'N/A')
            }
        else:
            logger.error(f"‚ùå Error demanda {response.status_code}")
            return {'status': 'ERROR', 'code': response.status_code}
            
    except Exception as e:
        logger.error(f"‚ùå Excepci√≥n demanda: {e}")
        return {'status': 'EXCEPTION', 'error': str(e)}

def test_historical_data(token):
    """Prueba descarga de datos hist√≥ricos (2020)"""
    logger.info("üîç Probando descarga datos hist√≥ricos 2020...")
    
    headers = {
        'Accept': 'application/json; application/vnd.esios-api-v1+json',
        'Content-Type': 'application/json',
        'Host': 'api.esios.ree.es',
        'Authorization': f'Token token={token}'
    }
    
    try:
        # Probar solo 1 d√≠a de enero 2020
        url = "https://api.esios.ree.es/indicators/600"
        params = {
            'start_date': '2020-01-01T00:00',
            'end_date': '2020-01-01T23:59'
        }
        
        response = requests.get(url, headers=headers, params=params, timeout=30)
        
        logger.info(f"üìä Hist√≥rico 2020 Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            values = data.get('indicator', {}).get('values', [])
            logger.info(f"‚úÖ Datos hist√≥ricos 2020 accesibles: {len(values)} valores")
            return {'status': 'SUCCESS', 'values_count': len(values)}
        else:
            logger.error(f"‚ùå Sin acceso a datos hist√≥ricos: {response.status_code}")
            return {'status': 'ERROR', 'code': response.status_code}
            
    except Exception as e:
        logger.error(f"‚ùå Error hist√≥ricos: {e}")
        return {'status': 'EXCEPTION', 'error': str(e)}

def main():
    """Funci√≥n principal"""
    print("üîç PRUEBA DESCARGA OMIE CON TOKEN ACTUAL")
    print("=" * 60)
    
    logger.info("üöÄ Verificando capacidades de descarga OMIE...")
    
    token = get_esios_token()
    if not token:
        logger.error("‚ùå Token no disponible")
        return
    
    logger.info(f"üîë Token: {token[:10]}...{token[-4:]}")
    
    # Ejecutar pruebas
    omie_result = test_omie_price_download(token, days_back=7)
    demand_result = test_demand_download(token, days_back=3)
    historical_result = test_historical_data(token)
    
    # RESUMEN FINAL
    print("\n" + "=" * 60)
    print("üìã RESUMEN CAPACIDADES TOKEN")
    print("=" * 60)
    
    logger.info("üéØ Resultados de descarga:")
    
    # OMIE
    if omie_result['status'] == 'SUCCESS':
        logger.info(f"   ‚úÖ PRECIOS OMIE: Funciona ({omie_result['values_count']} valores)")
        logger.info(f"      ‚Üí Indicador: {omie_result['indicator_name']}")
    else:
        logger.info(f"   ‚ùå PRECIOS OMIE: {omie_result['status']}")
    
    # Demanda
    if demand_result['status'] == 'SUCCESS':
        logger.info(f"   ‚úÖ DEMANDA: Funciona ({demand_result['values_count']} valores)")
        logger.info(f"      ‚Üí Indicador: {demand_result['indicator_name']}")
    else:
        logger.info(f"   ‚ùå DEMANDA: {demand_result['status']}")
    
    # Hist√≥ricos
    if historical_result['status'] == 'SUCCESS':
        logger.info(f"   ‚úÖ DATOS 2020: Accesibles ({historical_result['values_count']} valores)")
    else:
        logger.info(f"   ‚ùå DATOS 2020: {historical_result['status']}")
    
    # CONCLUSIONES
    print("\nüéØ CONCLUSIONES:")
    
    if omie_result['status'] == 'SUCCESS':
        print("‚úÖ TOKEN SIGUE FUNCIONANDO para precios OMIE")
        print("   ‚Üí Podemos continuar descargando precios de mercado")
        
        if historical_result['status'] == 'SUCCESS':
            print("‚úÖ ACCESO A DATOS HIST√ìRICOS 2020 disponible")
            print("   ‚Üí Podemos completar huecos hist√≥ricos")
    
    if demand_result['status'] == 'SUCCESS':
        print("‚úÖ DEMANDA PENINSULAR disponible")
        print("   ‚Üí Alternativa a demanda nacional (indicador 1293)")
    
    if (omie_result['status'] != 'SUCCESS' and 
        demand_result['status'] != 'SUCCESS' and 
        historical_result['status'] != 'SUCCESS'):
        print("‚ùå TOKEN COMPLETAMENTE IN√öTIL")
        print("   ‚Üí Necesario solicitar nuevo token a REE")
    else:
        print("üîÑ TOKEN PARCIALMENTE FUNCIONAL")
        print("   ‚Üí Adaptar scripts para usar solo indicadores disponibles")
    
    print(f"\nüìä Verificaci√≥n completada")

if __name__ == "__main__":
    main()
