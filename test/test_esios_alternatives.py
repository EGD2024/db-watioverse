#!/usr/bin/env python3
"""
Script para probar endpoints alternativos de ESIOS y fuentes alternativas
Identifica qu√© datos podemos obtener con el token actual
"""

import os
import sys
import logging
import requests
from datetime import datetime, timedelta
import json
from dotenv import load_dotenv

# Cargar variables de entorno
env_path = '/Users/vagalumeenergiamovil/PROYECTOS/Entorno/motores/motor_actualizaciones/config/migrated/watioverse.env'
load_dotenv(env_path)

# Configuraci√≥n de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/Users/vagalumeenergiamovil/PROYECTOS/Entorno/motores/db_watioverse/pipeline/logs/test_esios_alternatives.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def get_esios_token():
    """Obtiene el token ESIOS"""
    return os.getenv('ESIOS_API_TOKEN')

def test_public_endpoints():
    """Prueba endpoints p√∫blicos sin autenticaci√≥n"""
    logger.info("üîç Probando endpoints p√∫blicos (sin token)...")
    
    public_endpoints = [
        {
            'url': 'https://api.esios.ree.es/indicators',
            'name': 'Lista de indicadores'
        },
        {
            'url': 'https://api.esios.ree.es/archives',
            'name': 'Archivos disponibles'
        }
    ]
    
    results = {}
    
    for endpoint in public_endpoints:
        try:
            response = requests.get(endpoint['url'], timeout=10)
            logger.info(f"   {endpoint['name']}: Status {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                results[endpoint['name']] = {'status': 'OK', 'data': data}
                logger.info(f"   ‚úÖ Datos disponibles")
            else:
                results[endpoint['name']] = {'status': 'ERROR', 'code': response.status_code}
                
        except Exception as e:
            logger.error(f"   ‚ùå Error: {e}")
            results[endpoint['name']] = {'status': 'EXCEPTION', 'error': str(e)}
    
    return results

def test_basic_indicators_with_token(token):
    """Prueba indicadores b√°sicos con token"""
    logger.info("üîç Probando indicadores b√°sicos con token...")
    
    headers = {
        'Accept': 'application/json; application/vnd.esios-api-v1+json',
        'Content-Type': 'application/json',
        'Host': 'api.esios.ree.es',
        'Authorization': f'Token token={token}'
    }
    
    # Indicadores m√°s b√°sicos (posiblemente p√∫blicos)
    basic_indicators = [
        {'id': 1, 'name': 'Precio mercado OMIE'},
        {'id': 600, 'name': 'Precio mercado diario'},
        {'id': 1001, 'name': 'Generaci√≥n programada'},
        {'id': 1293, 'name': 'Demanda b.c. nacional'},
        {'id': 460, 'name': 'Demanda b.c. peninsular'}
    ]
    
    results = {}
    
    for indicator in basic_indicators:
        try:
            url = f"https://api.esios.ree.es/indicators/{indicator['id']}"
            response = requests.get(url, headers=headers, timeout=10)
            
            logger.info(f"   Indicador {indicator['id']} ({indicator['name']}): Status {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                results[indicator['id']] = {'status': 'OK', 'name': indicator['name']}
                logger.info(f"   ‚úÖ Accesible")
            elif response.status_code == 403:
                results[indicator['id']] = {'status': 'FORBIDDEN', 'name': indicator['name']}
                logger.info(f"   ‚ùå Sin permisos")
            else:
                results[indicator['id']] = {'status': 'ERROR', 'code': response.status_code}
                
        except Exception as e:
            logger.error(f"   ‚ùå Error: {e}")
            results[indicator['id']] = {'status': 'EXCEPTION', 'error': str(e)}
    
    return results

def test_archives_endpoint(token):
    """Prueba endpoint de archivos (posible alternativa)"""
    logger.info("üîç Probando endpoint de archivos...")
    
    headers = {
        'Accept': 'application/json; application/vnd.esios-api-v1+json',
        'Content-Type': 'application/json',
        'Host': 'api.esios.ree.es',
        'Authorization': f'Token token={token}'
    }
    
    try:
        response = requests.get('https://api.esios.ree.es/archives', headers=headers, timeout=10)
        logger.info(f"   Archives endpoint: Status {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            archives = data.get('archives', [])
            logger.info(f"   ‚úÖ {len(archives)} archivos disponibles")
            
            # Mostrar algunos archivos relevantes
            relevant_archives = [arch for arch in archives[:10] 
                               if any(keyword in arch.get('name', '').lower() 
                                     for keyword in ['demanda', 'precio', 'omie', 'mercado'])]
            
            for arch in relevant_archives:
                logger.info(f"   üìÅ {arch.get('name', 'N/A')}")
            
            return {'status': 'OK', 'count': len(archives), 'relevant': relevant_archives}
        else:
            logger.error(f"   ‚ùå Error {response.status_code}")
            return {'status': 'ERROR', 'code': response.status_code}
            
    except Exception as e:
        logger.error(f"   ‚ùå Error: {e}")
        return {'status': 'EXCEPTION', 'error': str(e)}

def test_alternative_data_sources():
    """Prueba fuentes alternativas de datos"""
    logger.info("üîç Probando fuentes alternativas...")
    
    # REE Datos Abiertos (sin autenticaci√≥n)
    alternative_sources = [
        {
            'name': 'REE Datos Abiertos',
            'url': 'https://apidatos.ree.es/en/datos/mercados/precios-mercados-tiempo-real',
            'description': 'API p√∫blica REE'
        },
        {
            'name': 'OMIE Datos P√∫blicos',
            'url': 'https://www.omie.es/es/file-access-list',
            'description': 'Archivos CSV p√∫blicos OMIE'
        }
    ]
    
    results = {}
    
    for source in alternative_sources:
        try:
            response = requests.get(source['url'], timeout=10)
            logger.info(f"   {source['name']}: Status {response.status_code}")
            
            if response.status_code == 200:
                results[source['name']] = {'status': 'OK', 'url': source['url']}
                logger.info(f"   ‚úÖ Disponible: {source['description']}")
            else:
                results[source['name']] = {'status': 'ERROR', 'code': response.status_code}
                
        except Exception as e:
            logger.error(f"   ‚ùå Error: {e}")
            results[source['name']] = {'status': 'EXCEPTION', 'error': str(e)}
    
    return results

def test_minimal_data_request(token):
    """Prueba solicitud m√≠nima de datos"""
    logger.info("üîç Probando solicitud m√≠nima de datos...")
    
    headers = {
        'Accept': 'application/json; application/vnd.esios-api-v1+json',
        'Content-Type': 'application/json',
        'Host': 'api.esios.ree.es',
        'Authorization': f'Token token={token}'
    }
    
    # Intentar obtener solo 1 hora de datos del indicador m√°s b√°sico
    yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
    
    try:
        url = "https://api.esios.ree.es/indicators/600"  # Precio mercado diario
        params = {
            'start_date': f'{yesterday}T00:00',
            'end_date': f'{yesterday}T01:00'  # Solo 1 hora
        }
        
        response = requests.get(url, headers=headers, params=params, timeout=10)
        logger.info(f"   Solicitud m√≠nima: Status {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            values = data.get('indicator', {}).get('values', [])
            logger.info(f"   ‚úÖ Datos obtenidos: {len(values)} valores")
            return {'status': 'OK', 'values': len(values)}
        else:
            logger.error(f"   ‚ùå Error {response.status_code}: {response.text}")
            return {'status': 'ERROR', 'code': response.status_code, 'error': response.text}
            
    except Exception as e:
        logger.error(f"   ‚ùå Error: {e}")
        return {'status': 'EXCEPTION', 'error': str(e)}

def main():
    """Funci√≥n principal"""
    print("üîç PRUEBA DE ALTERNATIVAS ESIOS")
    print("=" * 50)
    
    logger.info("üöÄ Iniciando pruebas de alternativas...")
    
    token = get_esios_token()
    if not token:
        logger.error("‚ùå Token no disponible")
        return
    
    # Ejecutar todas las pruebas
    public_results = test_public_endpoints()
    basic_indicators = test_basic_indicators_with_token(token)
    archives_result = test_archives_endpoint(token)
    alternatives = test_alternative_data_sources()
    minimal_request = test_minimal_data_request(token)
    
    # RESUMEN
    print("\n" + "=" * 50)
    print("üìã RESUMEN DE ALTERNATIVAS")
    print("=" * 50)
    
    logger.info("üéØ Resultados:")
    
    # Endpoints p√∫blicos
    public_ok = [name for name, result in public_results.items() if result['status'] == 'OK']
    if public_ok:
        logger.info(f"   ‚úÖ Endpoints p√∫blicos disponibles: {public_ok}")
    
    # Indicadores accesibles
    accessible_indicators = [ind_id for ind_id, result in basic_indicators.items() if result['status'] == 'OK']
    forbidden_indicators = [ind_id for ind_id, result in basic_indicators.items() if result['status'] == 'FORBIDDEN']
    
    logger.info(f"   ‚úÖ Indicadores accesibles: {accessible_indicators}")
    logger.info(f"   ‚ùå Indicadores prohibidos: {forbidden_indicators}")
    
    # Archivos
    if archives_result.get('status') == 'OK':
        logger.info(f"   ‚úÖ Archivos disponibles: {archives_result.get('count', 0)}")
    
    # Fuentes alternativas
    alt_ok = [name for name, result in alternatives.items() if result['status'] == 'OK']
    if alt_ok:
        logger.info(f"   ‚úÖ Fuentes alternativas: {alt_ok}")
    
    # Solicitud m√≠nima
    if minimal_request.get('status') == 'OK':
        logger.info(f"   ‚úÖ Solicitudes m√≠nimas funcionan")
    else:
        logger.info(f"   ‚ùå Solicitudes m√≠nimas fallan: {minimal_request.get('error', 'N/A')}")
    
    # RECOMENDACIONES
    print("\nüéØ RECOMENDACIONES:")
    
    if accessible_indicators:
        print(f"‚úÖ Usar indicadores accesibles: {accessible_indicators}")
        print("   ‚Üí Implementar carga con estos indicadores √∫nicamente")
    
    if archives_result.get('status') == 'OK':
        print("‚úÖ Usar endpoint de archivos como alternativa")
        print("   ‚Üí Descargar archivos CSV/Excel en lugar de API en tiempo real")
    
    if alt_ok:
        print(f"‚úÖ Considerar fuentes alternativas: {alt_ok}")
        print("   ‚Üí REE Datos Abiertos y OMIE archivos p√∫blicos")
    
    if not accessible_indicators and minimal_request.get('status') != 'OK':
        print("‚ùå Token completamente restringido")
        print("   ‚Üí Solicitar nuevo token a REE con permisos ampliados")
        print("   ‚Üí Usar exclusivamente fuentes alternativas p√∫blicas")
    
    print(f"\nüìä Pruebas completadas - Ver logs para detalles")

if __name__ == "__main__":
    main()
